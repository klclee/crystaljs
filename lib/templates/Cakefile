fs            = require 'fs'
{print}       = require 'util'
which         = require('which')
{spawn, exec} = require 'child_process'

# ANSI Terminal Colors
bold  = '\x1B[0;1m'
red   = '\x1B[0;31m'
green = '\x1B[0;32m'
reset = '\x1B[0m'

#some global locations
pkg = require './package.json'
build_dir = "#{__dirname}/build"
release_dir = "#{build_dir}/#{pkg.name}"
public_dir = "#{release_dir}/app/public"


pkg = JSON.parse fs.readFileSync('./package.json')
testCmd = pkg.scripts.test
startCmd = pkg.scripts.start


log = (message, color, explanation) ->
  console.log color + message + reset + ' ' + (explanation or '')

# Compiles app.coffee and src directory to the app directory
build = (out_dir, in_dir, callback) ->
  options = ['-c','-b', '-o', out_dir, in_dir]
  cmd = which.sync 'coffee'
  coffee = spawn cmd, options
  coffee.stdout.pipe process.stdout
  coffee.stderr.pipe process.stderr
  coffee.on 'exit', (status) -> callback?() if status is 0


# mocha test
test = (callback) ->
  options = [
    '--compilers'
    'coffee:coffee-script'
    '--colors'
    '--require'
    'should'
    '--require'
    './server'
  ]
  try
    cmd = which.sync 'mocha'
    spec = spawn cmd, options
    spec.stdout.pipe process.stdout
    spec.stderr.pipe process.stderr
    spec.on 'exit', (status) -> callback?() if status is 0
  catch err
    log err.message, red
    log 'Mocha is not installed - try npm install mocha -g', red

execCallBack= (process, callback) ->
  process.stdout.on 'data', (data) -> print data.toString()
  process.stderr.on 'data', (data) -> print data.toString()
  process.on 'exit', (status) -> callback?() if status is 0


nuke_build = (callback) ->
  rm = exec "rm -fr #{build_dir}"
  execCallBack rm, callback

set_up_release_dir = (callback) ->
  mkdir = exec "mkdir -p #{public_dir}/js/temp"
  execCallBack mkdir, ->
    cp = exec "cp -r app #{release_dir} && cp -r #{__dirname}/assets/js/* #{public_dir}/js/temp"
    execCallBack cp, callback?()

clean_gz_release = (callback) ->
  rm = exec "rm -fr #{release_dir}/app/public/js/temp"
  execCallBack rm, () ->
    tar = exec "cd #{release_dir} && tar -zcf #{pkg.name}.tar.gz * && mv #{pkg.name}.tar.gz #{build_dir}"
    execCallBack(tar, callback)

pre_release = (callback) ->
  build 'app', 'src', ->
    nuke_build -> set_up_release_dir -> build "#{public_dir}/js/temp", "#{public_dir}/js/temp",
    -> minify "#{release_dir}/app/public/js" , -> clean_gz_release callback




minify = (dest_js_dir, callback) ->
  js_search_path  = "#{dest_js_dir}/temp"
  js_files  = "find  #{js_search_path} -name '*.js'"
  to_param  = 'xargs cat'
  ugly_file = "#{dest_js_dir}/application_#{Date.now()}.js"
  ugly_exec    = "#{__dirname}/node_modules/uglify-js/bin/uglifyjs -m"

  uglify_it = "#{js_files} | #{to_param}| #{ugly_exec} > #{ugly_file}"
  ugly_proc = exec uglify_it
  execCallBack(ugly_proc, callback)
#  callback?()


#==============================================================================================
# BEGIN OF TASKS
#==============================================================================================

task 'docs', 'Generate annotated source code with Docco', ->
  fs.readdir 'src', (err, contents) ->
    files = ("src/#{file}" for file in contents when /\.coffee$/.test file)
    try
      cmd = which.sync 'docco'
      docco = spawn cmd, files
      docco.stdout.pipe process.stdout
      docco.stderr.pipe process.stderr
      docco.on 'exit', (status) -> callback?() if status is 0
    catch err
      log err.message, red
      log 'Docco is not installed - try npm install docco -g', red

task 'build', ->
  build 'app', 'src', -> log ":)", green

task 'spec', 'Run Mocha tests', ->
  build 'app', 'src', -> test -> log ":)", green

task 'test', 'Run Mocha tests', ->
  build 'app', 'src', -> test -> log ":)", green

task 'release', 'build release', ->
  pre_release -> log ":) done: the release can be found at #{build_dir}", green


task 'dev', 'start dev env', ->
  # watch_coffee
  options = ['-c', '-b', '-w', '-o', 'app', 'src']
  cmd = which.sync 'coffee'
  coffee = spawn cmd, options
  coffee.stdout.pipe process.stdout
  coffee.stderr.pipe process.stderr
  log 'Watching coffee files', green
  # watch_js
  supervisor = spawn 'node', ['./node_modules/supervisor/lib/cli-wrapper.js','-w','app,views', '-e', 'js|jade', 'server']
  supervisor.stdout.pipe process.stdout
  supervisor.stderr.pipe process.stderr
  log 'Watching js files and running server', green

  